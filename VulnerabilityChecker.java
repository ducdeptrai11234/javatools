import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class VulnerabilityChecker {
    private CVEDatabase cveDatabase;
    private Map<String, String> vulnerabilityResults;

    public VulnerabilityChecker() {
        this.cveDatabase = new CVEDatabase();
        this.vulnerabilityResults = new HashMap<>();
    }

    public void check(List<String> scanResults) {
        ExecutorService executor = Executors.newFixedThreadPool(10);

        for (String result : scanResults) {
            executor.submit(() -> {
                String[] parts = result.split(":");
                String ip = parts[0];
                int port = Integer.parseInt(parts[1]);

                String service = detectService(ip, port);
                List<String> cveIds = getCVEIdsForService(service);

                for (String cveId : cveIds) {
                    String vulnerabilityInfo = cveDatabase.getCVEInfo(cveId);
                    if (vulnerabilityInfo != null && !vulnerabilityInfo.equals("Thông tin không tìm thấy")) {
                        synchronized (vulnerabilityResults) {
                            vulnerabilityResults.put(result, vulnerabilityInfo);
                        }
                    }
                }
            });
        }
        executor.shutdown();
        while (!executor.isTerminated()) {
            // Chờ cho tất cả các tác vụ hoàn tất
        }
    }

    private String detectService(String ip, int port) {
        // Xác định dịch vụ chạy trên cổng (ví dụ banner grabbing)
        return "exampleService"; // Cần cài đặt chi tiết
    }

    private List<String> getCVEIdsForService(String service) {
        // Trả về danh sách các CVE liên quan đến dịch vụ
        return List.of("CVE-2023-XXXX"); // Thay thế bằng CVE thực tế
    }

    public Map<String, String> getVulnerabilityResults() {
        return vulnerabilityResults;
    }
}

